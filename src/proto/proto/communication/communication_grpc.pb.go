// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: src/proto/communication.proto

package communication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendClient is the client API for Send service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendClient interface {
	SendMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*RawMessage, error)
	// Cross-Sig:
	SendSigRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error)
	SendReplyRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error)
	SendConfirmRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error)
	SendFetchRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error)
	SendCatchupRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error)
	Join(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*RawMessage, error)
	RBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	ABASendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	PRFSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	ECRBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	CBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	EVCBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	MVBASendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	MBASendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	RetrieveSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	SimpleSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	EchoSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	GCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	SimpleProofSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	PlainCBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
	HotStuffSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error)
}

type sendClient struct {
	cc grpc.ClientConnInterface
}

func NewSendClient(cc grpc.ClientConnInterface) SendClient {
	return &sendClient{cc}
}

func (c *sendClient) SendMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*RawMessage, error) {
	out := new(RawMessage)
	err := c.cc.Invoke(ctx, "/communication.Send/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) SendSigRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/SendSigRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) SendReplyRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/SendReplyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) SendConfirmRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/SendConfirmRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) SendFetchRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/SendFetchRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) SendCatchupRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/SendCatchupRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) Join(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*RawMessage, error) {
	out := new(RawMessage)
	err := c.cc.Invoke(ctx, "/communication.Send/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) RBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/RBCSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) ABASendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/ABASendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) PRFSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/PRFSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) ECRBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/ECRBCSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) CBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/CBCSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) EVCBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/EVCBCSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) MVBASendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/MVBASendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) MBASendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/MBASendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) RetrieveSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/RetrieveSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) SimpleSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/SimpleSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) EchoSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/EchoSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) GCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/GCSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) SimpleProofSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/SimpleProofSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) PlainCBCSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/PlainCBCSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendClient) HotStuffSendByteMsg(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Send/HotStuffSendByteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendServer is the server API for Send service.
// All implementations must embed UnimplementedSendServer
// for forward compatibility
type SendServer interface {
	SendMsg(context.Context, *RawMessage) (*Empty, error)
	SendRequest(context.Context, *Request) (*RawMessage, error)
	// Cross-Sig:
	SendSigRequest(context.Context, *Request) (*Empty, error)
	SendReplyRequest(context.Context, *Request) (*Empty, error)
	SendConfirmRequest(context.Context, *Request) (*Empty, error)
	SendFetchRequest(context.Context, *Request) (*Empty, error)
	SendCatchupRequest(context.Context, *Request) (*Empty, error)
	Join(context.Context, *RawMessage) (*RawMessage, error)
	RBCSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	ABASendByteMsg(context.Context, *RawMessage) (*Empty, error)
	PRFSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	ECRBCSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	CBCSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	EVCBCSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	MVBASendByteMsg(context.Context, *RawMessage) (*Empty, error)
	MBASendByteMsg(context.Context, *RawMessage) (*Empty, error)
	RetrieveSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	SimpleSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	EchoSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	GCSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	SimpleProofSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	PlainCBCSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	HotStuffSendByteMsg(context.Context, *RawMessage) (*Empty, error)
	mustEmbedUnimplementedSendServer()
}

// UnimplementedSendServer must be embedded to have forward compatible implementations.
type UnimplementedSendServer struct {
}

func (UnimplementedSendServer) SendMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedSendServer) SendRequest(context.Context, *Request) (*RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedSendServer) SendSigRequest(context.Context, *Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSigRequest not implemented")
}
func (UnimplementedSendServer) SendReplyRequest(context.Context, *Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReplyRequest not implemented")
}
func (UnimplementedSendServer) SendConfirmRequest(context.Context, *Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfirmRequest not implemented")
}
func (UnimplementedSendServer) SendFetchRequest(context.Context, *Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFetchRequest not implemented")
}
func (UnimplementedSendServer) SendCatchupRequest(context.Context, *Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCatchupRequest not implemented")
}
func (UnimplementedSendServer) Join(context.Context, *RawMessage) (*RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedSendServer) RBCSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RBCSendByteMsg not implemented")
}
func (UnimplementedSendServer) ABASendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ABASendByteMsg not implemented")
}
func (UnimplementedSendServer) PRFSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PRFSendByteMsg not implemented")
}
func (UnimplementedSendServer) ECRBCSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ECRBCSendByteMsg not implemented")
}
func (UnimplementedSendServer) CBCSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CBCSendByteMsg not implemented")
}
func (UnimplementedSendServer) EVCBCSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EVCBCSendByteMsg not implemented")
}
func (UnimplementedSendServer) MVBASendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MVBASendByteMsg not implemented")
}
func (UnimplementedSendServer) MBASendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MBASendByteMsg not implemented")
}
func (UnimplementedSendServer) RetrieveSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSendByteMsg not implemented")
}
func (UnimplementedSendServer) SimpleSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleSendByteMsg not implemented")
}
func (UnimplementedSendServer) EchoSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoSendByteMsg not implemented")
}
func (UnimplementedSendServer) GCSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GCSendByteMsg not implemented")
}
func (UnimplementedSendServer) SimpleProofSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleProofSendByteMsg not implemented")
}
func (UnimplementedSendServer) PlainCBCSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlainCBCSendByteMsg not implemented")
}
func (UnimplementedSendServer) HotStuffSendByteMsg(context.Context, *RawMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotStuffSendByteMsg not implemented")
}
func (UnimplementedSendServer) mustEmbedUnimplementedSendServer() {}

// UnsafeSendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendServer will
// result in compilation errors.
type UnsafeSendServer interface {
	mustEmbedUnimplementedSendServer()
}

func RegisterSendServer(s grpc.ServiceRegistrar, srv SendServer) {
	s.RegisterService(&Send_ServiceDesc, srv)
}

func _Send_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SendMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SendRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_SendSigRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SendSigRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SendSigRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SendSigRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_SendReplyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SendReplyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SendReplyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SendReplyRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_SendConfirmRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SendConfirmRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SendConfirmRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SendConfirmRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_SendFetchRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SendFetchRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SendFetchRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SendFetchRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_SendCatchupRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SendCatchupRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SendCatchupRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SendCatchupRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).Join(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_RBCSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).RBCSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/RBCSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).RBCSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_ABASendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).ABASendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/ABASendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).ABASendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_PRFSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).PRFSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/PRFSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).PRFSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_ECRBCSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).ECRBCSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/ECRBCSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).ECRBCSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_CBCSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).CBCSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/CBCSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).CBCSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_EVCBCSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).EVCBCSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/EVCBCSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).EVCBCSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_MVBASendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).MVBASendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/MVBASendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).MVBASendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_MBASendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).MBASendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/MBASendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).MBASendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_RetrieveSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).RetrieveSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/RetrieveSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).RetrieveSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_SimpleSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SimpleSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SimpleSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SimpleSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_EchoSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).EchoSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/EchoSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).EchoSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_GCSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).GCSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/GCSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).GCSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_SimpleProofSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SimpleProofSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/SimpleProofSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SimpleProofSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_PlainCBCSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).PlainCBCSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/PlainCBCSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).PlainCBCSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Send_HotStuffSendByteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).HotStuffSendByteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Send/HotStuffSendByteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).HotStuffSendByteMsg(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Send_ServiceDesc is the grpc.ServiceDesc for Send service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Send_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "communication.Send",
	HandlerType: (*SendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _Send_SendMsg_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _Send_SendRequest_Handler,
		},
		{
			MethodName: "SendSigRequest",
			Handler:    _Send_SendSigRequest_Handler,
		},
		{
			MethodName: "SendReplyRequest",
			Handler:    _Send_SendReplyRequest_Handler,
		},
		{
			MethodName: "SendConfirmRequest",
			Handler:    _Send_SendConfirmRequest_Handler,
		},
		{
			MethodName: "SendFetchRequest",
			Handler:    _Send_SendFetchRequest_Handler,
		},
		{
			MethodName: "SendCatchupRequest",
			Handler:    _Send_SendCatchupRequest_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Send_Join_Handler,
		},
		{
			MethodName: "RBCSendByteMsg",
			Handler:    _Send_RBCSendByteMsg_Handler,
		},
		{
			MethodName: "ABASendByteMsg",
			Handler:    _Send_ABASendByteMsg_Handler,
		},
		{
			MethodName: "PRFSendByteMsg",
			Handler:    _Send_PRFSendByteMsg_Handler,
		},
		{
			MethodName: "ECRBCSendByteMsg",
			Handler:    _Send_ECRBCSendByteMsg_Handler,
		},
		{
			MethodName: "CBCSendByteMsg",
			Handler:    _Send_CBCSendByteMsg_Handler,
		},
		{
			MethodName: "EVCBCSendByteMsg",
			Handler:    _Send_EVCBCSendByteMsg_Handler,
		},
		{
			MethodName: "MVBASendByteMsg",
			Handler:    _Send_MVBASendByteMsg_Handler,
		},
		{
			MethodName: "MBASendByteMsg",
			Handler:    _Send_MBASendByteMsg_Handler,
		},
		{
			MethodName: "RetrieveSendByteMsg",
			Handler:    _Send_RetrieveSendByteMsg_Handler,
		},
		{
			MethodName: "SimpleSendByteMsg",
			Handler:    _Send_SimpleSendByteMsg_Handler,
		},
		{
			MethodName: "EchoSendByteMsg",
			Handler:    _Send_EchoSendByteMsg_Handler,
		},
		{
			MethodName: "GCSendByteMsg",
			Handler:    _Send_GCSendByteMsg_Handler,
		},
		{
			MethodName: "SimpleProofSendByteMsg",
			Handler:    _Send_SimpleProofSendByteMsg_Handler,
		},
		{
			MethodName: "PlainCBCSendByteMsg",
			Handler:    _Send_PlainCBCSendByteMsg_Handler,
		},
		{
			MethodName: "HotStuffSendByteMsg",
			Handler:    _Send_HotStuffSendByteMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/communication.proto",
}
